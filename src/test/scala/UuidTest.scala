// UUID: a 16-byte (128-bit) string as a universally unique identifier
// V1: Uniqueness
//   generated by using a combination the host computers MAC address and the current date and time
//   guaranteed to get a completely unique ID, unless you generate it from the same computer, and at the exact same time
// V3:
//   generated by a unique ID from an MD5 hash of a namespace and name
//   use this if you need backwards compatibility (with another system that generates UUIDs from names)
// V4: Randomness
//   every bit of a UUID v4 is generated randomly and with no inherent logic
//   with possible combinations (2^128), it is almost impossible to generate a duplicate

object UuidTest {

  import java.nio.charset.Charset
  import java.util.UUID
  val PORUSNS = uuidToBytes(UUID.fromString("f1318e6e-111c-37a5-abe9-1800f1dbce16"))
  val URLNS = uuidToBytes(UUID.fromString("6ba7b811-9dad-11d1-80b4-00c04fd430c8"))

  def uuidToBytes(`val`: UUID): Array[Byte] = {
    val msb = `val`.getMostSignificantBits
    val lsb = `val`.getLeastSignificantBits
    val buffer = new Array[Byte](16)
    var i = 0
    while (i < 8) {
      buffer(i) = (msb >>> 8 * (7 - i)).toByte
      i += 1
    }
    i = 8
    while (i < 16) {
      buffer(i) = (lsb >>> 8 * (7 - i)).toByte
      i += 1
    }
    buffer
  }

  def generate(namespace: Array[Byte], name: Array[Byte]): UUID = {
    val tmp = new Array[Byte](namespace.length + name.length)
    System.arraycopy(namespace, 0, tmp, 0, namespace.length)
    System.arraycopy(name, 0, tmp, PORUSNS.length, name.length)
    UUID.nameUUIDFromBytes(tmp)
  }

  def generatePorusUUID(input: String): UUID = {
    if (input == null) return null
    try
      generate(PORUSNS, input.getBytes(Charset.forName("UTF-8")))
    catch {
      case e: Exception =>
        null
    }
  }

  def generateUrlUUID(input: String): UUID = {
    if (input == null) return null
    try
      generate(URLNS, input.getBytes(Charset.forName("UTF-8")))
    catch {
      case e: Exception =>
        null
    }
  }

  def main(args: Array[String]): Unit = {
    val url = "https://www.nydailynews.com/news/sns-bc-us--people-dj-khaled-20191210-story.html"
    println(generatePorusUUID(url)) // 0056af3d-cd15-3f14-af92-c132fb1aac36
    println(generateUrlUUID(url)) // e1e99581-f7b8-3d94-b629-38ca9223d83b
    // ace0dfe9-46ef-3374-be72-5e6d5973e663
  }
}
